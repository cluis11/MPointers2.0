// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: memory_manager.proto
#ifndef GRPC_memory_5fmanager_2eproto__INCLUDED
#define GRPC_memory_5fmanager_2eproto__INCLUDED

#include "memory_manager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace memorymanager {

class MemoryManager final {
 public:
  static constexpr char const* service_full_name() {
    return "memorymanager.MemoryManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Operaciones básicas de MPointers
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::memorymanager::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::memorymanager::SetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::memorymanager::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::memorymanager::IncreaseRefCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>> AsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>>(AsyncIncreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>> PrepareAsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>>(PrepareAsyncIncreaseRefCountRaw(context, request, cq));
    }
    virtual ::grpc::Status DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::memorymanager::DecreaseRefCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>> AsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>>(AsyncDecreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>> PrepareAsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>>(PrepareAsyncDecreaseRefCountRaw(context, request, cq));
    }
    // Operaciones específicas para lista enlazada
    virtual ::grpc::Status CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::memorymanager::CreateNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>> AsyncCreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>>(AsyncCreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>> PrepareAsyncCreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>>(PrepareAsyncCreateNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::memorymanager::GetNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>> AsyncGetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>>(AsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>> PrepareAsyncGetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>>(PrepareAsyncGetNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::memorymanager::UpdateNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>> AsyncUpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>>(AsyncUpdateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>> PrepareAsyncUpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>>(PrepareAsyncUpdateNodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Operaciones básicas de MPointers
      virtual void Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Operaciones específicas para lista enlazada
      virtual void CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>* AsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::IncreaseRefCountResponse>* PrepareAsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>* AsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::DecreaseRefCountResponse>* PrepareAsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>* AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::CreateNodeResponse>* PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>* AsyncGetNodeRaw(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::GetNodeResponse>* PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>* AsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::memorymanager::UpdateNodeResponse>* PrepareAsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::memorymanager::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::memorymanager::SetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::memorymanager::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::memorymanager::IncreaseRefCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>> AsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>>(AsyncIncreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>> PrepareAsyncIncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>>(PrepareAsyncIncreaseRefCountRaw(context, request, cq));
    }
    ::grpc::Status DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::memorymanager::DecreaseRefCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>> AsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>>(AsyncDecreaseRefCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>> PrepareAsyncDecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>>(PrepareAsyncDecreaseRefCountRaw(context, request, cq));
    }
    ::grpc::Status CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::memorymanager::CreateNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>> AsyncCreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>>(AsyncCreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>> PrepareAsyncCreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>>(PrepareAsyncCreateNodeRaw(context, request, cq));
    }
    ::grpc::Status GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::memorymanager::GetNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>> AsyncGetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>>(AsyncGetNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>> PrepareAsyncGetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>>(PrepareAsyncGetNodeRaw(context, request, cq));
    }
    ::grpc::Status UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::memorymanager::UpdateNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>> AsyncUpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>>(AsyncUpdateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>> PrepareAsyncUpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>>(PrepareAsyncUpdateNodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response, std::function<void(::grpc::Status)>) override;
      void IncreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response, std::function<void(::grpc::Status)>) override;
      void DecreaseRefCount(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateNode(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNode(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateNode(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::memorymanager::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::memorymanager::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::memorymanager::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>* AsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::IncreaseRefCountResponse>* PrepareAsyncIncreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::IncreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>* AsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::DecreaseRefCountResponse>* PrepareAsyncDecreaseRefCountRaw(::grpc::ClientContext* context, const ::memorymanager::DecreaseRefCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>* AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::CreateNodeResponse>* PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>* AsyncGetNodeRaw(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::GetNodeResponse>* PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::memorymanager::GetNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>* AsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::memorymanager::UpdateNodeResponse>* PrepareAsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::memorymanager::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_IncreaseRefCount_;
    const ::grpc::internal::RpcMethod rpcmethod_DecreaseRefCount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNode_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Operaciones básicas de MPointers
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response);
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response);
    virtual ::grpc::Status IncreaseRefCount(::grpc::ServerContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response);
    virtual ::grpc::Status DecreaseRefCount(::grpc::ServerContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response);
    // Operaciones específicas para lista enlazada
    virtual ::grpc::Status CreateNode(::grpc::ServerContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response);
    virtual ::grpc::Status GetNode(::grpc::ServerContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response);
    virtual ::grpc::Status UpdateNode(::grpc::ServerContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::memorymanager::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::memorymanager::SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::SetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::memorymanager::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncreaseRefCount(::grpc::ServerContext* context, ::memorymanager::IncreaseRefCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::IncreaseRefCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecreaseRefCount(::grpc::ServerContext* context, ::memorymanager::DecreaseRefCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::DecreaseRefCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNode() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNode(::grpc::ServerContext* context, ::memorymanager::CreateNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::CreateNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNode() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNode(::grpc::ServerContext* context, ::memorymanager::GetNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::GetNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNode(::grpc::ServerContext* context, ::memorymanager::UpdateNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::memorymanager::UpdateNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Set<WithAsyncMethod_Get<WithAsyncMethod_IncreaseRefCount<WithAsyncMethod_DecreaseRefCount<WithAsyncMethod_CreateNode<WithAsyncMethod_GetNode<WithAsyncMethod_UpdateNode<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::CreateRequest, ::memorymanager::CreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::CreateRequest* request, ::memorymanager::CreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::memorymanager::CreateRequest, ::memorymanager::CreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::CreateRequest, ::memorymanager::CreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Set() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::SetRequest, ::memorymanager::SetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::SetRequest* request, ::memorymanager::SetResponse* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::MessageAllocator< ::memorymanager::SetRequest, ::memorymanager::SetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::SetRequest, ::memorymanager::SetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::GetRequest, ::memorymanager::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::GetRequest* request, ::memorymanager::GetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::memorymanager::GetRequest, ::memorymanager::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::GetRequest, ::memorymanager::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::IncreaseRefCountRequest, ::memorymanager::IncreaseRefCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::IncreaseRefCountRequest* request, ::memorymanager::IncreaseRefCountResponse* response) { return this->IncreaseRefCount(context, request, response); }));}
    void SetMessageAllocatorFor_IncreaseRefCount(
        ::grpc::MessageAllocator< ::memorymanager::IncreaseRefCountRequest, ::memorymanager::IncreaseRefCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::IncreaseRefCountRequest, ::memorymanager::IncreaseRefCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::DecreaseRefCountRequest, ::memorymanager::DecreaseRefCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::DecreaseRefCountRequest* request, ::memorymanager::DecreaseRefCountResponse* response) { return this->DecreaseRefCount(context, request, response); }));}
    void SetMessageAllocatorFor_DecreaseRefCount(
        ::grpc::MessageAllocator< ::memorymanager::DecreaseRefCountRequest, ::memorymanager::DecreaseRefCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::DecreaseRefCountRequest, ::memorymanager::DecreaseRefCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNode() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::CreateNodeRequest, ::memorymanager::CreateNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::CreateNodeRequest* request, ::memorymanager::CreateNodeResponse* response) { return this->CreateNode(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNode(
        ::grpc::MessageAllocator< ::memorymanager::CreateNodeRequest, ::memorymanager::CreateNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::CreateNodeRequest, ::memorymanager::CreateNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNode(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNode() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::GetNodeRequest, ::memorymanager::GetNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::GetNodeRequest* request, ::memorymanager::GetNodeResponse* response) { return this->GetNode(context, request, response); }));}
    void SetMessageAllocatorFor_GetNode(
        ::grpc::MessageAllocator< ::memorymanager::GetNodeRequest, ::memorymanager::GetNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::GetNodeRequest, ::memorymanager::GetNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNode(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNode() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::memorymanager::UpdateNodeRequest, ::memorymanager::UpdateNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::memorymanager::UpdateNodeRequest* request, ::memorymanager::UpdateNodeResponse* response) { return this->UpdateNode(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNode(
        ::grpc::MessageAllocator< ::memorymanager::UpdateNodeRequest, ::memorymanager::UpdateNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::memorymanager::UpdateNodeRequest, ::memorymanager::UpdateNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNode(
      ::grpc::CallbackServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Set<WithCallbackMethod_Get<WithCallbackMethod_IncreaseRefCount<WithCallbackMethod_DecreaseRefCount<WithCallbackMethod_CreateNode<WithCallbackMethod_GetNode<WithCallbackMethod_UpdateNode<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNode() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNode() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncreaseRefCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecreaseRefCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNode() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNode() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Set() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~WithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IncreaseRefCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DecreaseRefCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DecreaseRefCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNode() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNode() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNode() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::CreateRequest, ::memorymanager::CreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::CreateRequest, ::memorymanager::CreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateRequest* /*request*/, ::memorymanager::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::CreateRequest,::memorymanager::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::SetRequest, ::memorymanager::SetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::SetRequest, ::memorymanager::SetResponse>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::memorymanager::SetRequest* /*request*/, ::memorymanager::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::SetRequest,::memorymanager::SetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::GetRequest, ::memorymanager::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::GetRequest, ::memorymanager::GetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::memorymanager::GetRequest* /*request*/, ::memorymanager::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::GetRequest,::memorymanager::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IncreaseRefCount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::IncreaseRefCountRequest, ::memorymanager::IncreaseRefCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::IncreaseRefCountRequest, ::memorymanager::IncreaseRefCountResponse>* streamer) {
                       return this->StreamedIncreaseRefCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IncreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::IncreaseRefCountRequest* /*request*/, ::memorymanager::IncreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncreaseRefCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::IncreaseRefCountRequest,::memorymanager::IncreaseRefCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecreaseRefCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DecreaseRefCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::DecreaseRefCountRequest, ::memorymanager::DecreaseRefCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::DecreaseRefCountRequest, ::memorymanager::DecreaseRefCountResponse>* streamer) {
                       return this->StreamedDecreaseRefCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DecreaseRefCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecreaseRefCount(::grpc::ServerContext* /*context*/, const ::memorymanager::DecreaseRefCountRequest* /*request*/, ::memorymanager::DecreaseRefCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecreaseRefCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::DecreaseRefCountRequest,::memorymanager::DecreaseRefCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNode() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::CreateNodeRequest, ::memorymanager::CreateNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::CreateNodeRequest, ::memorymanager::CreateNodeResponse>* streamer) {
                       return this->StreamedCreateNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::CreateNodeRequest* /*request*/, ::memorymanager::CreateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::CreateNodeRequest,::memorymanager::CreateNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNode() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::GetNodeRequest, ::memorymanager::GetNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::GetNodeRequest, ::memorymanager::GetNodeResponse>* streamer) {
                       return this->StreamedGetNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNode(::grpc::ServerContext* /*context*/, const ::memorymanager::GetNodeRequest* /*request*/, ::memorymanager::GetNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::GetNodeRequest,::memorymanager::GetNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::memorymanager::UpdateNodeRequest, ::memorymanager::UpdateNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::memorymanager::UpdateNodeRequest, ::memorymanager::UpdateNodeResponse>* streamer) {
                       return this->StreamedUpdateNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNode(::grpc::ServerContext* /*context*/, const ::memorymanager::UpdateNodeRequest* /*request*/, ::memorymanager::UpdateNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::memorymanager::UpdateNodeRequest,::memorymanager::UpdateNodeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_IncreaseRefCount<WithStreamedUnaryMethod_DecreaseRefCount<WithStreamedUnaryMethod_CreateNode<WithStreamedUnaryMethod_GetNode<WithStreamedUnaryMethod_UpdateNode<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_IncreaseRefCount<WithStreamedUnaryMethod_DecreaseRefCount<WithStreamedUnaryMethod_CreateNode<WithStreamedUnaryMethod_GetNode<WithStreamedUnaryMethod_UpdateNode<Service > > > > > > > > StreamedService;
};

}  // namespace memorymanager


#endif  // GRPC_memory_5fmanager_2eproto__INCLUDED
