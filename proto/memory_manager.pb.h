// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: memory_manager.proto
// Protobuf C++ Version: 5.29.3

#ifndef memory_5fmanager_2eproto_2epb_2eh
#define memory_5fmanager_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_memory_5fmanager_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_memory_5fmanager_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_memory_5fmanager_2eproto;
namespace memorymanager {
class CreateNodeRequest;
struct CreateNodeRequestDefaultTypeInternal;
extern CreateNodeRequestDefaultTypeInternal _CreateNodeRequest_default_instance_;
class CreateNodeResponse;
struct CreateNodeResponseDefaultTypeInternal;
extern CreateNodeResponseDefaultTypeInternal _CreateNodeResponse_default_instance_;
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class DecreaseRefCountRequest;
struct DecreaseRefCountRequestDefaultTypeInternal;
extern DecreaseRefCountRequestDefaultTypeInternal _DecreaseRefCountRequest_default_instance_;
class DecreaseRefCountResponse;
struct DecreaseRefCountResponseDefaultTypeInternal;
extern DecreaseRefCountResponseDefaultTypeInternal _DecreaseRefCountResponse_default_instance_;
class GetNodeRequest;
struct GetNodeRequestDefaultTypeInternal;
extern GetNodeRequestDefaultTypeInternal _GetNodeRequest_default_instance_;
class GetNodeResponse;
struct GetNodeResponseDefaultTypeInternal;
extern GetNodeResponseDefaultTypeInternal _GetNodeResponse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IncreaseRefCountRequest;
struct IncreaseRefCountRequestDefaultTypeInternal;
extern IncreaseRefCountRequestDefaultTypeInternal _IncreaseRefCountRequest_default_instance_;
class IncreaseRefCountResponse;
struct IncreaseRefCountResponseDefaultTypeInternal;
extern IncreaseRefCountResponseDefaultTypeInternal _IncreaseRefCountResponse_default_instance_;
class SetRequest;
struct SetRequestDefaultTypeInternal;
extern SetRequestDefaultTypeInternal _SetRequest_default_instance_;
class SetResponse;
struct SetResponseDefaultTypeInternal;
extern SetResponseDefaultTypeInternal _SetResponse_default_instance_;
class UpdateNodeRequest;
struct UpdateNodeRequestDefaultTypeInternal;
extern UpdateNodeRequestDefaultTypeInternal _UpdateNodeRequest_default_instance_;
class UpdateNodeResponse;
struct UpdateNodeResponseDefaultTypeInternal;
extern UpdateNodeResponseDefaultTypeInternal _UpdateNodeResponse_default_instance_;
}  // namespace memorymanager
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace memorymanager {

// ===================================================================


// -------------------------------------------------------------------

class UpdateNodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.UpdateNodeResponse) */ {
 public:
  inline UpdateNodeResponse() : UpdateNodeResponse(nullptr) {}
  ~UpdateNodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateNodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateNodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateNodeResponse(const UpdateNodeResponse& from) : UpdateNodeResponse(nullptr, from) {}
  inline UpdateNodeResponse(UpdateNodeResponse&& from) noexcept
      : UpdateNodeResponse(nullptr, std::move(from)) {}
  inline UpdateNodeResponse& operator=(const UpdateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeResponse& operator=(UpdateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeResponse*>(
        &_UpdateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(UpdateNodeResponse& a, UpdateNodeResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateNodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateNodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateNodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateNodeResponse& from) { UpdateNodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateNodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.UpdateNodeResponse"; }

 protected:
  explicit UpdateNodeResponse(::google::protobuf::Arena* arena);
  UpdateNodeResponse(::google::protobuf::Arena* arena, const UpdateNodeResponse& from);
  UpdateNodeResponse(::google::protobuf::Arena* arena, UpdateNodeResponse&& from) noexcept
      : UpdateNodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.UpdateNodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateNodeResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class UpdateNodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.UpdateNodeRequest) */ {
 public:
  inline UpdateNodeRequest() : UpdateNodeRequest(nullptr) {}
  ~UpdateNodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateNodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateNodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateNodeRequest(const UpdateNodeRequest& from) : UpdateNodeRequest(nullptr, from) {}
  inline UpdateNodeRequest(UpdateNodeRequest&& from) noexcept
      : UpdateNodeRequest(nullptr, std::move(from)) {}
  inline UpdateNodeRequest& operator=(const UpdateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeRequest& operator=(UpdateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeRequest*>(
        &_UpdateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UpdateNodeRequest& a, UpdateNodeRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateNodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateNodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateNodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateNodeRequest& from) { UpdateNodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateNodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.UpdateNodeRequest"; }

 protected:
  explicit UpdateNodeRequest(::google::protobuf::Arena* arena);
  UpdateNodeRequest(::google::protobuf::Arena* arena, const UpdateNodeRequest& from);
  UpdateNodeRequest(::google::protobuf::Arena* arena, UpdateNodeRequest&& from) noexcept
      : UpdateNodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatedDataFieldNumber = 3,
    kNodeIdFieldNumber = 1,
    kNextIdFieldNumber = 2,
  };
  // bytes updated_data = 3;
  void clear_updated_data() ;
  const std::string& updated_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updated_data(Arg_&& arg, Args_... args);
  std::string* mutable_updated_data();
  PROTOBUF_NODISCARD std::string* release_updated_data();
  void set_allocated_updated_data(std::string* value);

  private:
  const std::string& _internal_updated_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_data(
      const std::string& value);
  std::string* _internal_mutable_updated_data();

  public:
  // int32 node_id = 1;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // int32 next_id = 2;
  void clear_next_id() ;
  ::int32_t next_id() const;
  void set_next_id(::int32_t value);

  private:
  ::int32_t _internal_next_id() const;
  void _internal_set_next_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.UpdateNodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateNodeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr updated_data_;
    ::int32_t node_id_;
    ::int32_t next_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.SetResponse) */ {
 public:
  inline SetResponse() : SetResponse(nullptr) {}
  ~SetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetResponse(const SetResponse& from) : SetResponse(nullptr, from) {}
  inline SetResponse(SetResponse&& from) noexcept
      : SetResponse(nullptr, std::move(from)) {}
  inline SetResponse& operator=(const SetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResponse& operator=(SetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetResponse* internal_default_instance() {
    return reinterpret_cast<const SetResponse*>(
        &_SetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetResponse& a, SetResponse& b) { a.Swap(&b); }
  inline void Swap(SetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetResponse& from) { SetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.SetResponse"; }

 protected:
  explicit SetResponse(::google::protobuf::Arena* arena);
  SetResponse(::google::protobuf::Arena* arena, const SetResponse& from);
  SetResponse(::google::protobuf::Arena* arena, SetResponse&& from) noexcept
      : SetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.SetResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class SetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.SetRequest) */ {
 public:
  inline SetRequest() : SetRequest(nullptr) {}
  ~SetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetRequest(const SetRequest& from) : SetRequest(nullptr, from) {}
  inline SetRequest(SetRequest&& from) noexcept
      : SetRequest(nullptr, std::move(from)) {}
  inline SetRequest& operator=(const SetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRequest& operator=(SetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 2,
    kFloatValue = 3,
    kStringValue = 4,
    kSerializedValue = 5,
    VALUE_NOT_SET = 0,
  };
  static inline const SetRequest* internal_default_instance() {
    return reinterpret_cast<const SetRequest*>(
        &_SetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SetRequest& a, SetRequest& b) { a.Swap(&b); }
  inline void Swap(SetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetRequest& from) { SetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.SetRequest"; }

 protected:
  explicit SetRequest(::google::protobuf::Arena* arena);
  SetRequest(::google::protobuf::Arena* arena, const SetRequest& from);
  SetRequest(::google::protobuf::Arena* arena, SetRequest&& from) noexcept
      : SetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kSerializedValueFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // float float_value = 3;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // string string_value = 4;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bytes serialized_value = 5;
  bool has_serialized_value() const;
  void clear_serialized_value() ;
  const std::string& serialized_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serialized_value(Arg_&& arg, Args_... args);
  std::string* mutable_serialized_value();
  PROTOBUF_NODISCARD std::string* release_serialized_value();
  void set_allocated_serialized_value(std::string* value);

  private:
  const std::string& _internal_serialized_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_value(
      const std::string& value);
  std::string* _internal_mutable_serialized_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:memorymanager.SetRequest)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_serialized_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetRequest& from_msg);
    ::int32_t id_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t int_value_;
      float float_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::google::protobuf::internal::ArenaStringPtr serialized_value_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class IncreaseRefCountResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.IncreaseRefCountResponse) */ {
 public:
  inline IncreaseRefCountResponse() : IncreaseRefCountResponse(nullptr) {}
  ~IncreaseRefCountResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncreaseRefCountResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncreaseRefCountResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncreaseRefCountResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncreaseRefCountResponse(const IncreaseRefCountResponse& from) : IncreaseRefCountResponse(nullptr, from) {}
  inline IncreaseRefCountResponse(IncreaseRefCountResponse&& from) noexcept
      : IncreaseRefCountResponse(nullptr, std::move(from)) {}
  inline IncreaseRefCountResponse& operator=(const IncreaseRefCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncreaseRefCountResponse& operator=(IncreaseRefCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncreaseRefCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncreaseRefCountResponse* internal_default_instance() {
    return reinterpret_cast<const IncreaseRefCountResponse*>(
        &_IncreaseRefCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(IncreaseRefCountResponse& a, IncreaseRefCountResponse& b) { a.Swap(&b); }
  inline void Swap(IncreaseRefCountResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncreaseRefCountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncreaseRefCountResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncreaseRefCountResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncreaseRefCountResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncreaseRefCountResponse& from) { IncreaseRefCountResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncreaseRefCountResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.IncreaseRefCountResponse"; }

 protected:
  explicit IncreaseRefCountResponse(::google::protobuf::Arena* arena);
  IncreaseRefCountResponse(::google::protobuf::Arena* arena, const IncreaseRefCountResponse& from);
  IncreaseRefCountResponse(::google::protobuf::Arena* arena, IncreaseRefCountResponse&& from) noexcept
      : IncreaseRefCountResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.IncreaseRefCountResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncreaseRefCountResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class IncreaseRefCountRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.IncreaseRefCountRequest) */ {
 public:
  inline IncreaseRefCountRequest() : IncreaseRefCountRequest(nullptr) {}
  ~IncreaseRefCountRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncreaseRefCountRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncreaseRefCountRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncreaseRefCountRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncreaseRefCountRequest(const IncreaseRefCountRequest& from) : IncreaseRefCountRequest(nullptr, from) {}
  inline IncreaseRefCountRequest(IncreaseRefCountRequest&& from) noexcept
      : IncreaseRefCountRequest(nullptr, std::move(from)) {}
  inline IncreaseRefCountRequest& operator=(const IncreaseRefCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncreaseRefCountRequest& operator=(IncreaseRefCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncreaseRefCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncreaseRefCountRequest* internal_default_instance() {
    return reinterpret_cast<const IncreaseRefCountRequest*>(
        &_IncreaseRefCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(IncreaseRefCountRequest& a, IncreaseRefCountRequest& b) { a.Swap(&b); }
  inline void Swap(IncreaseRefCountRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncreaseRefCountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncreaseRefCountRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncreaseRefCountRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncreaseRefCountRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncreaseRefCountRequest& from) { IncreaseRefCountRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncreaseRefCountRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.IncreaseRefCountRequest"; }

 protected:
  explicit IncreaseRefCountRequest(::google::protobuf::Arena* arena);
  IncreaseRefCountRequest(::google::protobuf::Arena* arena, const IncreaseRefCountRequest& from);
  IncreaseRefCountRequest(::google::protobuf::Arena* arena, IncreaseRefCountRequest&& from) noexcept
      : IncreaseRefCountRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.IncreaseRefCountRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncreaseRefCountRequest& from_msg);
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetResponse(const GetResponse& from) : GetResponse(nullptr, from) {}
  inline GetResponse(GetResponse&& from) noexcept
      : GetResponse(nullptr, std::move(from)) {}
  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 2,
    kFloatValue = 3,
    kStringValue = 4,
    kSerializedValue = 5,
    VALUE_NOT_SET = 0,
  };
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
        &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GetResponse& a, GetResponse& b) { a.Swap(&b); }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetResponse& from) { GetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.GetResponse"; }

 protected:
  explicit GetResponse(::google::protobuf::Arena* arena);
  GetResponse(::google::protobuf::Arena* arena, const GetResponse& from);
  GetResponse(::google::protobuf::Arena* arena, GetResponse&& from) noexcept
      : GetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kSerializedValueFieldNumber = 5,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // float float_value = 3;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // string string_value = 4;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bytes serialized_value = 5;
  bool has_serialized_value() const;
  void clear_serialized_value() ;
  const std::string& serialized_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serialized_value(Arg_&& arg, Args_... args);
  std::string* mutable_serialized_value();
  PROTOBUF_NODISCARD std::string* release_serialized_value();
  void set_allocated_serialized_value(std::string* value);

  private:
  const std::string& _internal_serialized_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_value(
      const std::string& value);
  std::string* _internal_mutable_serialized_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:memorymanager.GetResponse)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_serialized_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetResponse& from_msg);
    bool success_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t int_value_;
      float float_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::google::protobuf::internal::ArenaStringPtr serialized_value_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRequest(const GetRequest& from) : GetRequest(nullptr, from) {}
  inline GetRequest(GetRequest&& from) noexcept
      : GetRequest(nullptr, std::move(from)) {}
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
        &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetRequest& a, GetRequest& b) { a.Swap(&b); }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRequest& from) { GetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.GetRequest"; }

 protected:
  explicit GetRequest(::google::protobuf::Arena* arena);
  GetRequest(::google::protobuf::Arena* arena, const GetRequest& from);
  GetRequest(::google::protobuf::Arena* arena, GetRequest&& from) noexcept
      : GetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.GetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRequest& from_msg);
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class GetNodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.GetNodeResponse) */ {
 public:
  inline GetNodeResponse() : GetNodeResponse(nullptr) {}
  ~GetNodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNodeResponse(const GetNodeResponse& from) : GetNodeResponse(nullptr, from) {}
  inline GetNodeResponse(GetNodeResponse&& from) noexcept
      : GetNodeResponse(nullptr, std::move(from)) {}
  inline GetNodeResponse& operator=(const GetNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeResponse& operator=(GetNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeResponse*>(
        &_GetNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetNodeResponse& a, GetNodeResponse& b) { a.Swap(&b); }
  inline void Swap(GetNodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNodeResponse& from) { GetNodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.GetNodeResponse"; }

 protected:
  explicit GetNodeResponse(::google::protobuf::Arena* arena);
  GetNodeResponse(::google::protobuf::Arena* arena, const GetNodeResponse& from);
  GetNodeResponse(::google::protobuf::Arena* arena, GetNodeResponse&& from) noexcept
      : GetNodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
    kDataIdFieldNumber = 2,
    kNextIdFieldNumber = 3,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 data_id = 2;
  void clear_data_id() ;
  ::int32_t data_id() const;
  void set_data_id(::int32_t value);

  private:
  ::int32_t _internal_data_id() const;
  void _internal_set_data_id(::int32_t value);

  public:
  // int32 next_id = 3;
  void clear_next_id() ;
  ::int32_t next_id() const;
  void set_next_id(::int32_t value);

  private:
  ::int32_t _internal_next_id() const;
  void _internal_set_next_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.GetNodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNodeResponse& from_msg);
    bool success_;
    ::int32_t data_id_;
    ::int32_t next_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class GetNodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.GetNodeRequest) */ {
 public:
  inline GetNodeRequest() : GetNodeRequest(nullptr) {}
  ~GetNodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNodeRequest(const GetNodeRequest& from) : GetNodeRequest(nullptr, from) {}
  inline GetNodeRequest(GetNodeRequest&& from) noexcept
      : GetNodeRequest(nullptr, std::move(from)) {}
  inline GetNodeRequest& operator=(const GetNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeRequest& operator=(GetNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeRequest*>(
        &_GetNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(GetNodeRequest& a, GetNodeRequest& b) { a.Swap(&b); }
  inline void Swap(GetNodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNodeRequest& from) { GetNodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.GetNodeRequest"; }

 protected:
  explicit GetNodeRequest(::google::protobuf::Arena* arena);
  GetNodeRequest(::google::protobuf::Arena* arena, const GetNodeRequest& from);
  GetNodeRequest(::google::protobuf::Arena* arena, GetNodeRequest&& from) noexcept
      : GetNodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // int32 node_id = 1;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.GetNodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNodeRequest& from_msg);
    ::int32_t node_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class DecreaseRefCountResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.DecreaseRefCountResponse) */ {
 public:
  inline DecreaseRefCountResponse() : DecreaseRefCountResponse(nullptr) {}
  ~DecreaseRefCountResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecreaseRefCountResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecreaseRefCountResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecreaseRefCountResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecreaseRefCountResponse(const DecreaseRefCountResponse& from) : DecreaseRefCountResponse(nullptr, from) {}
  inline DecreaseRefCountResponse(DecreaseRefCountResponse&& from) noexcept
      : DecreaseRefCountResponse(nullptr, std::move(from)) {}
  inline DecreaseRefCountResponse& operator=(const DecreaseRefCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecreaseRefCountResponse& operator=(DecreaseRefCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecreaseRefCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecreaseRefCountResponse* internal_default_instance() {
    return reinterpret_cast<const DecreaseRefCountResponse*>(
        &_DecreaseRefCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DecreaseRefCountResponse& a, DecreaseRefCountResponse& b) { a.Swap(&b); }
  inline void Swap(DecreaseRefCountResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecreaseRefCountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecreaseRefCountResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecreaseRefCountResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecreaseRefCountResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecreaseRefCountResponse& from) { DecreaseRefCountResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecreaseRefCountResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.DecreaseRefCountResponse"; }

 protected:
  explicit DecreaseRefCountResponse(::google::protobuf::Arena* arena);
  DecreaseRefCountResponse(::google::protobuf::Arena* arena, const DecreaseRefCountResponse& from);
  DecreaseRefCountResponse(::google::protobuf::Arena* arena, DecreaseRefCountResponse&& from) noexcept
      : DecreaseRefCountResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.DecreaseRefCountResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecreaseRefCountResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class DecreaseRefCountRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.DecreaseRefCountRequest) */ {
 public:
  inline DecreaseRefCountRequest() : DecreaseRefCountRequest(nullptr) {}
  ~DecreaseRefCountRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecreaseRefCountRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecreaseRefCountRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecreaseRefCountRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecreaseRefCountRequest(const DecreaseRefCountRequest& from) : DecreaseRefCountRequest(nullptr, from) {}
  inline DecreaseRefCountRequest(DecreaseRefCountRequest&& from) noexcept
      : DecreaseRefCountRequest(nullptr, std::move(from)) {}
  inline DecreaseRefCountRequest& operator=(const DecreaseRefCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecreaseRefCountRequest& operator=(DecreaseRefCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecreaseRefCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecreaseRefCountRequest* internal_default_instance() {
    return reinterpret_cast<const DecreaseRefCountRequest*>(
        &_DecreaseRefCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DecreaseRefCountRequest& a, DecreaseRefCountRequest& b) { a.Swap(&b); }
  inline void Swap(DecreaseRefCountRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecreaseRefCountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecreaseRefCountRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecreaseRefCountRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecreaseRefCountRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecreaseRefCountRequest& from) { DecreaseRefCountRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecreaseRefCountRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.DecreaseRefCountRequest"; }

 protected:
  explicit DecreaseRefCountRequest(::google::protobuf::Arena* arena);
  DecreaseRefCountRequest(::google::protobuf::Arena* arena, const DecreaseRefCountRequest& from);
  DecreaseRefCountRequest(::google::protobuf::Arena* arena, DecreaseRefCountRequest&& from) noexcept
      : DecreaseRefCountRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.DecreaseRefCountRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecreaseRefCountRequest& from_msg);
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateResponse(const CreateResponse& from) : CreateResponse(nullptr, from) {}
  inline CreateResponse(CreateResponse&& from) noexcept
      : CreateResponse(nullptr, std::move(from)) {}
  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
        &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CreateResponse& a, CreateResponse& b) { a.Swap(&b); }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateResponse& from) { CreateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.CreateResponse"; }

 protected:
  explicit CreateResponse(::google::protobuf::Arena* arena);
  CreateResponse(::google::protobuf::Arena* arena, const CreateResponse& from);
  CreateResponse(::google::protobuf::Arena* arena, CreateResponse&& from) noexcept
      : CreateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 id = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.CreateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateResponse& from_msg);
    bool success_;
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateRequest(const CreateRequest& from) : CreateRequest(nullptr, from) {}
  inline CreateRequest(CreateRequest&& from) noexcept
      : CreateRequest(nullptr, std::move(from)) {}
  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
        &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CreateRequest& a, CreateRequest& b) { a.Swap(&b); }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateRequest& from) { CreateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.CreateRequest"; }

 protected:
  explicit CreateRequest(::google::protobuf::Arena* arena);
  CreateRequest(::google::protobuf::Arena* arena, const CreateRequest& from);
  CreateRequest(::google::protobuf::Arena* arena, CreateRequest&& from) noexcept
      : CreateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // int32 size = 1;
  void clear_size() ;
  ::int32_t size() const;
  void set_size(::int32_t value);

  private:
  ::int32_t _internal_size() const;
  void _internal_set_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.CreateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::int32_t size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.CreateNodeResponse) */ {
 public:
  inline CreateNodeResponse() : CreateNodeResponse(nullptr) {}
  ~CreateNodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateNodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateNodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateNodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateNodeResponse(const CreateNodeResponse& from) : CreateNodeResponse(nullptr, from) {}
  inline CreateNodeResponse(CreateNodeResponse&& from) noexcept
      : CreateNodeResponse(nullptr, std::move(from)) {}
  inline CreateNodeResponse& operator=(const CreateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeResponse& operator=(CreateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNodeResponse*>(
        &_CreateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(CreateNodeResponse& a, CreateNodeResponse& b) { a.Swap(&b); }
  inline void Swap(CreateNodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateNodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateNodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateNodeResponse& from) { CreateNodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateNodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.CreateNodeResponse"; }

 protected:
  explicit CreateNodeResponse(::google::protobuf::Arena* arena);
  CreateNodeResponse(::google::protobuf::Arena* arena, const CreateNodeResponse& from);
  CreateNodeResponse(::google::protobuf::Arena* arena, CreateNodeResponse&& from) noexcept
      : CreateNodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kDataIdFieldNumber = 3,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 node_id = 2;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // int32 data_id = 3;
  void clear_data_id() ;
  ::int32_t data_id() const;
  void set_data_id(::int32_t value);

  private:
  ::int32_t _internal_data_id() const;
  void _internal_set_data_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.CreateNodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateNodeResponse& from_msg);
    bool success_;
    ::int32_t node_id_;
    ::int32_t data_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:memorymanager.CreateNodeRequest) */ {
 public:
  inline CreateNodeRequest() : CreateNodeRequest(nullptr) {}
  ~CreateNodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateNodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateNodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateNodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateNodeRequest(const CreateNodeRequest& from) : CreateNodeRequest(nullptr, from) {}
  inline CreateNodeRequest(CreateNodeRequest&& from) noexcept
      : CreateNodeRequest(nullptr, std::move(from)) {}
  inline CreateNodeRequest& operator=(const CreateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeRequest& operator=(CreateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodeRequest*>(
        &_CreateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(CreateNodeRequest& a, CreateNodeRequest& b) { a.Swap(&b); }
  inline void Swap(CreateNodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateNodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateNodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateNodeRequest& from) { CreateNodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateNodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "memorymanager.CreateNodeRequest"; }

 protected:
  explicit CreateNodeRequest(::google::protobuf::Arena* arena);
  CreateNodeRequest(::google::protobuf::Arena* arena, const CreateNodeRequest& from);
  CreateNodeRequest(::google::protobuf::Arena* arena, CreateNodeRequest&& from) noexcept
      : CreateNodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeTypeFieldNumber = 1,
    kInitialDataFieldNumber = 2,
  };
  // string node_type = 1;
  void clear_node_type() ;
  const std::string& node_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_type(Arg_&& arg, Args_... args);
  std::string* mutable_node_type();
  PROTOBUF_NODISCARD std::string* release_node_type();
  void set_allocated_node_type(std::string* value);

  private:
  const std::string& _internal_node_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_type(
      const std::string& value);
  std::string* _internal_mutable_node_type();

  public:
  // bytes initial_data = 2;
  void clear_initial_data() ;
  const std::string& initial_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initial_data(Arg_&& arg, Args_... args);
  std::string* mutable_initial_data();
  PROTOBUF_NODISCARD std::string* release_initial_data();
  void set_allocated_initial_data(std::string* value);

  private:
  const std::string& _internal_initial_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initial_data(
      const std::string& value);
  std::string* _internal_mutable_initial_data();

  public:
  // @@protoc_insertion_point(class_scope:memorymanager.CreateNodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateNodeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_type_;
    ::google::protobuf::internal::ArenaStringPtr initial_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_memory_5fmanager_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateRequest

// int32 size = 1;
inline void CreateRequest::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0;
}
inline ::int32_t CreateRequest::size() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateRequest.size)
  return _internal_size();
}
inline void CreateRequest::set_size(::int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateRequest.size)
}
inline ::int32_t CreateRequest::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void CreateRequest::_internal_set_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// string type = 2;
inline void CreateRequest::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& CreateRequest::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.CreateRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.CreateRequest.type)
}
inline std::string* CreateRequest::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:memorymanager.CreateRequest.type)
  return _s;
}
inline const std::string& CreateRequest::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void CreateRequest::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* CreateRequest::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* CreateRequest::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.CreateRequest.type)
  return _impl_.type_.Release();
}
inline void CreateRequest::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.CreateRequest.type)
}

// -------------------------------------------------------------------

// CreateResponse

// bool success = 1;
inline void CreateResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CreateResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateResponse.success)
  return _internal_success();
}
inline void CreateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateResponse.success)
}
inline bool CreateResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CreateResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// int32 id = 2;
inline void CreateResponse::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t CreateResponse::id() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateResponse.id)
  return _internal_id();
}
inline void CreateResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateResponse.id)
}
inline ::int32_t CreateResponse::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void CreateResponse::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// SetRequest

// int32 id = 1;
inline void SetRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t SetRequest::id() const {
  // @@protoc_insertion_point(field_get:memorymanager.SetRequest.id)
  return _internal_id();
}
inline void SetRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.SetRequest.id)
}
inline ::int32_t SetRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void SetRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 int_value = 2;
inline bool SetRequest::has_int_value() const {
  return value_case() == kIntValue;
}
inline void SetRequest::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void SetRequest::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::int32_t SetRequest::int_value() const {
  // @@protoc_insertion_point(field_get:memorymanager.SetRequest.int_value)
  return _internal_int_value();
}
inline void SetRequest::set_int_value(::int32_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:memorymanager.SetRequest.int_value)
}
inline ::int32_t SetRequest::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return 0;
}

// float float_value = 3;
inline bool SetRequest::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void SetRequest::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void SetRequest::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatValue) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float SetRequest::float_value() const {
  // @@protoc_insertion_point(field_get:memorymanager.SetRequest.float_value)
  return _internal_float_value();
}
inline void SetRequest::set_float_value(float value) {
  if (value_case() != kFloatValue) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:memorymanager.SetRequest.float_value)
}
inline float SetRequest::_internal_float_value() const {
  if (value_case() == kFloatValue) {
    return _impl_.value_.float_value_;
  }
  return 0;
}

// string string_value = 4;
inline bool SetRequest::has_string_value() const {
  return value_case() == kStringValue;
}
inline void SetRequest::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void SetRequest::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SetRequest::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.SetRequest.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRequest::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.SetRequest.string_value)
}
inline std::string* SetRequest::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:memorymanager.SetRequest.string_value)
  return _s;
}
inline const std::string& SetRequest::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void SetRequest::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* SetRequest::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* SetRequest::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.SetRequest.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void SetRequest::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.SetRequest.string_value)
}

// bytes serialized_value = 5;
inline bool SetRequest::has_serialized_value() const {
  return value_case() == kSerializedValue;
}
inline void SetRequest::set_has_serialized_value() {
  _impl_._oneof_case_[0] = kSerializedValue;
}
inline void SetRequest::clear_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kSerializedValue) {
    _impl_.value_.serialized_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SetRequest::serialized_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.SetRequest.serialized_value)
  return _internal_serialized_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRequest::set_serialized_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  _impl_.value_.serialized_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.SetRequest.serialized_value)
}
inline std::string* SetRequest::mutable_serialized_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serialized_value();
  // @@protoc_insertion_point(field_mutable:memorymanager.SetRequest.serialized_value)
  return _s;
}
inline const std::string& SetRequest::_internal_serialized_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kSerializedValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.serialized_value_.Get();
}
inline void SetRequest::_internal_set_serialized_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  _impl_.value_.serialized_value_.Set(value, GetArena());
}
inline std::string* SetRequest::_internal_mutable_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  return _impl_.value_.serialized_value_.Mutable( GetArena());
}
inline std::string* SetRequest::release_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.SetRequest.serialized_value)
  if (value_case() != kSerializedValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.serialized_value_.Release();
}
inline void SetRequest::set_allocated_serialized_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.SetRequest.serialized_value)
}

inline bool SetRequest::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SetRequest::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline SetRequest::ValueCase SetRequest::value_case() const {
  return SetRequest::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetResponse

// bool success = 1;
inline void SetResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool SetResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.SetResponse.success)
  return _internal_success();
}
inline void SetResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.SetResponse.success)
}
inline bool SetResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void SetResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// int32 id = 1;
inline void GetRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t GetRequest::id() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetRequest.id)
  return _internal_id();
}
inline void GetRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetRequest.id)
}
inline ::int32_t GetRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void GetRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// GetResponse

// bool success = 1;
inline void GetResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool GetResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetResponse.success)
  return _internal_success();
}
inline void GetResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetResponse.success)
}
inline bool GetResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void GetResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// int32 int_value = 2;
inline bool GetResponse::has_int_value() const {
  return value_case() == kIntValue;
}
inline void GetResponse::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void GetResponse::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::int32_t GetResponse::int_value() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetResponse.int_value)
  return _internal_int_value();
}
inline void GetResponse::set_int_value(::int32_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:memorymanager.GetResponse.int_value)
}
inline ::int32_t GetResponse::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return 0;
}

// float float_value = 3;
inline bool GetResponse::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void GetResponse::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void GetResponse::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatValue) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float GetResponse::float_value() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetResponse.float_value)
  return _internal_float_value();
}
inline void GetResponse::set_float_value(float value) {
  if (value_case() != kFloatValue) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:memorymanager.GetResponse.float_value)
}
inline float GetResponse::_internal_float_value() const {
  if (value_case() == kFloatValue) {
    return _impl_.value_.float_value_;
  }
  return 0;
}

// string string_value = 4;
inline bool GetResponse::has_string_value() const {
  return value_case() == kStringValue;
}
inline void GetResponse::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void GetResponse::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& GetResponse::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.GetResponse.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetResponse::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.GetResponse.string_value)
}
inline std::string* GetResponse::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:memorymanager.GetResponse.string_value)
  return _s;
}
inline const std::string& GetResponse::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void GetResponse::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* GetResponse::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* GetResponse::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.GetResponse.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void GetResponse::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.GetResponse.string_value)
}

// bytes serialized_value = 5;
inline bool GetResponse::has_serialized_value() const {
  return value_case() == kSerializedValue;
}
inline void GetResponse::set_has_serialized_value() {
  _impl_._oneof_case_[0] = kSerializedValue;
}
inline void GetResponse::clear_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kSerializedValue) {
    _impl_.value_.serialized_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& GetResponse::serialized_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.GetResponse.serialized_value)
  return _internal_serialized_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetResponse::set_serialized_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  _impl_.value_.serialized_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.GetResponse.serialized_value)
}
inline std::string* GetResponse::mutable_serialized_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serialized_value();
  // @@protoc_insertion_point(field_mutable:memorymanager.GetResponse.serialized_value)
  return _s;
}
inline const std::string& GetResponse::_internal_serialized_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kSerializedValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.serialized_value_.Get();
}
inline void GetResponse::_internal_set_serialized_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  _impl_.value_.serialized_value_.Set(value, GetArena());
}
inline std::string* GetResponse::_internal_mutable_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kSerializedValue) {
    clear_value();

    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitDefault();
  }
  return _impl_.value_.serialized_value_.Mutable( GetArena());
}
inline std::string* GetResponse::release_serialized_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.GetResponse.serialized_value)
  if (value_case() != kSerializedValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.serialized_value_.Release();
}
inline void GetResponse::set_allocated_serialized_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_serialized_value();
    _impl_.value_.serialized_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.GetResponse.serialized_value)
}

inline bool GetResponse::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void GetResponse::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline GetResponse::ValueCase GetResponse::value_case() const {
  return GetResponse::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// IncreaseRefCountRequest

// int32 id = 1;
inline void IncreaseRefCountRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t IncreaseRefCountRequest::id() const {
  // @@protoc_insertion_point(field_get:memorymanager.IncreaseRefCountRequest.id)
  return _internal_id();
}
inline void IncreaseRefCountRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.IncreaseRefCountRequest.id)
}
inline ::int32_t IncreaseRefCountRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void IncreaseRefCountRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// IncreaseRefCountResponse

// bool success = 1;
inline void IncreaseRefCountResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool IncreaseRefCountResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.IncreaseRefCountResponse.success)
  return _internal_success();
}
inline void IncreaseRefCountResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.IncreaseRefCountResponse.success)
}
inline bool IncreaseRefCountResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void IncreaseRefCountResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// DecreaseRefCountRequest

// int32 id = 1;
inline void DecreaseRefCountRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t DecreaseRefCountRequest::id() const {
  // @@protoc_insertion_point(field_get:memorymanager.DecreaseRefCountRequest.id)
  return _internal_id();
}
inline void DecreaseRefCountRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.DecreaseRefCountRequest.id)
}
inline ::int32_t DecreaseRefCountRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void DecreaseRefCountRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// DecreaseRefCountResponse

// bool success = 1;
inline void DecreaseRefCountResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool DecreaseRefCountResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.DecreaseRefCountResponse.success)
  return _internal_success();
}
inline void DecreaseRefCountResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.DecreaseRefCountResponse.success)
}
inline bool DecreaseRefCountResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void DecreaseRefCountResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// CreateNodeRequest

// string node_type = 1;
inline void CreateNodeRequest::clear_node_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_.ClearToEmpty();
}
inline const std::string& CreateNodeRequest::node_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.CreateNodeRequest.node_type)
  return _internal_node_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateNodeRequest::set_node_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.CreateNodeRequest.node_type)
}
inline std::string* CreateNodeRequest::mutable_node_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_type();
  // @@protoc_insertion_point(field_mutable:memorymanager.CreateNodeRequest.node_type)
  return _s;
}
inline const std::string& CreateNodeRequest::_internal_node_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_type_.Get();
}
inline void CreateNodeRequest::_internal_set_node_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_.Set(value, GetArena());
}
inline std::string* CreateNodeRequest::_internal_mutable_node_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_type_.Mutable( GetArena());
}
inline std::string* CreateNodeRequest::release_node_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.CreateNodeRequest.node_type)
  return _impl_.node_type_.Release();
}
inline void CreateNodeRequest::set_allocated_node_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_type_.IsDefault()) {
    _impl_.node_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.CreateNodeRequest.node_type)
}

// bytes initial_data = 2;
inline void CreateNodeRequest::clear_initial_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_data_.ClearToEmpty();
}
inline const std::string& CreateNodeRequest::initial_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.CreateNodeRequest.initial_data)
  return _internal_initial_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateNodeRequest::set_initial_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.CreateNodeRequest.initial_data)
}
inline std::string* CreateNodeRequest::mutable_initial_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initial_data();
  // @@protoc_insertion_point(field_mutable:memorymanager.CreateNodeRequest.initial_data)
  return _s;
}
inline const std::string& CreateNodeRequest::_internal_initial_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initial_data_.Get();
}
inline void CreateNodeRequest::_internal_set_initial_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_data_.Set(value, GetArena());
}
inline std::string* CreateNodeRequest::_internal_mutable_initial_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initial_data_.Mutable( GetArena());
}
inline std::string* CreateNodeRequest::release_initial_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.CreateNodeRequest.initial_data)
  return _impl_.initial_data_.Release();
}
inline void CreateNodeRequest::set_allocated_initial_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initial_data_.IsDefault()) {
    _impl_.initial_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.CreateNodeRequest.initial_data)
}

// -------------------------------------------------------------------

// CreateNodeResponse

// bool success = 1;
inline void CreateNodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CreateNodeResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateNodeResponse.success)
  return _internal_success();
}
inline void CreateNodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateNodeResponse.success)
}
inline bool CreateNodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CreateNodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// int32 node_id = 2;
inline void CreateNodeResponse::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t CreateNodeResponse::node_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateNodeResponse.node_id)
  return _internal_node_id();
}
inline void CreateNodeResponse::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateNodeResponse.node_id)
}
inline ::int32_t CreateNodeResponse::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void CreateNodeResponse::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// int32 data_id = 3;
inline void CreateNodeResponse::clear_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_id_ = 0;
}
inline ::int32_t CreateNodeResponse::data_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.CreateNodeResponse.data_id)
  return _internal_data_id();
}
inline void CreateNodeResponse::set_data_id(::int32_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.CreateNodeResponse.data_id)
}
inline ::int32_t CreateNodeResponse::_internal_data_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_id_;
}
inline void CreateNodeResponse::_internal_set_data_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_id_ = value;
}

// -------------------------------------------------------------------

// GetNodeRequest

// int32 node_id = 1;
inline void GetNodeRequest::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t GetNodeRequest::node_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetNodeRequest.node_id)
  return _internal_node_id();
}
inline void GetNodeRequest::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetNodeRequest.node_id)
}
inline ::int32_t GetNodeRequest::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void GetNodeRequest::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// -------------------------------------------------------------------

// GetNodeResponse

// bool success = 1;
inline void GetNodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool GetNodeResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetNodeResponse.success)
  return _internal_success();
}
inline void GetNodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetNodeResponse.success)
}
inline bool GetNodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void GetNodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// int32 data_id = 2;
inline void GetNodeResponse::clear_data_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_id_ = 0;
}
inline ::int32_t GetNodeResponse::data_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetNodeResponse.data_id)
  return _internal_data_id();
}
inline void GetNodeResponse::set_data_id(::int32_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetNodeResponse.data_id)
}
inline ::int32_t GetNodeResponse::_internal_data_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_id_;
}
inline void GetNodeResponse::_internal_set_data_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_id_ = value;
}

// int32 next_id = 3;
inline void GetNodeResponse::clear_next_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_id_ = 0;
}
inline ::int32_t GetNodeResponse::next_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.GetNodeResponse.next_id)
  return _internal_next_id();
}
inline void GetNodeResponse::set_next_id(::int32_t value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.GetNodeResponse.next_id)
}
inline ::int32_t GetNodeResponse::_internal_next_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_id_;
}
inline void GetNodeResponse::_internal_set_next_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_id_ = value;
}

// -------------------------------------------------------------------

// UpdateNodeRequest

// int32 node_id = 1;
inline void UpdateNodeRequest::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t UpdateNodeRequest::node_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.UpdateNodeRequest.node_id)
  return _internal_node_id();
}
inline void UpdateNodeRequest::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.UpdateNodeRequest.node_id)
}
inline ::int32_t UpdateNodeRequest::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void UpdateNodeRequest::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// int32 next_id = 2;
inline void UpdateNodeRequest::clear_next_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_id_ = 0;
}
inline ::int32_t UpdateNodeRequest::next_id() const {
  // @@protoc_insertion_point(field_get:memorymanager.UpdateNodeRequest.next_id)
  return _internal_next_id();
}
inline void UpdateNodeRequest::set_next_id(::int32_t value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:memorymanager.UpdateNodeRequest.next_id)
}
inline ::int32_t UpdateNodeRequest::_internal_next_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_id_;
}
inline void UpdateNodeRequest::_internal_set_next_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_id_ = value;
}

// bytes updated_data = 3;
inline void UpdateNodeRequest::clear_updated_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_data_.ClearToEmpty();
}
inline const std::string& UpdateNodeRequest::updated_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:memorymanager.UpdateNodeRequest.updated_data)
  return _internal_updated_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateNodeRequest::set_updated_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:memorymanager.UpdateNodeRequest.updated_data)
}
inline std::string* UpdateNodeRequest::mutable_updated_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updated_data();
  // @@protoc_insertion_point(field_mutable:memorymanager.UpdateNodeRequest.updated_data)
  return _s;
}
inline const std::string& UpdateNodeRequest::_internal_updated_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_data_.Get();
}
inline void UpdateNodeRequest::_internal_set_updated_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_data_.Set(value, GetArena());
}
inline std::string* UpdateNodeRequest::_internal_mutable_updated_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.updated_data_.Mutable( GetArena());
}
inline std::string* UpdateNodeRequest::release_updated_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:memorymanager.UpdateNodeRequest.updated_data)
  return _impl_.updated_data_.Release();
}
inline void UpdateNodeRequest::set_allocated_updated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.updated_data_.IsDefault()) {
    _impl_.updated_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:memorymanager.UpdateNodeRequest.updated_data)
}

// -------------------------------------------------------------------

// UpdateNodeResponse

// bool success = 1;
inline void UpdateNodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool UpdateNodeResponse::success() const {
  // @@protoc_insertion_point(field_get:memorymanager.UpdateNodeResponse.success)
  return _internal_success();
}
inline void UpdateNodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:memorymanager.UpdateNodeResponse.success)
}
inline bool UpdateNodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void UpdateNodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace memorymanager


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // memory_5fmanager_2eproto_2epb_2eh
